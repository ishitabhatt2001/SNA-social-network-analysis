import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
        
        
import networkx as nx
G = nx.read_edgelist("../input/dataset1/data1.txt", create_using = nx.Graph(), nodetype=int)
print(nx.info(G))
import matplotlib.pyplot as plt
%matplotlib inline

plt.figure(figsize=(10,10))
nx.draw_networkx(G)
plt.show()

density=2*(32/(34*33))
density

nx.average_clustering(G)

d=nx.shortest_path(G, 5,7)
d

most_influential = nx.degree_centrality(G)
for w in sorted(most_influential, key=most_influential.get, reverse=True):
    print(w, most_influential[w])

most_important_link = nx.eigenvector_centrality(G)
for w in sorted(most_important_link, key=most_important_link.get, reverse=True):
    print(w, most_important_link[w])
    
    best_connector = nx.betweenness_centrality(G)
for w in sorted(best_connector, key=best_connector.get, reverse=True):
    print(w, best_connector[w])
    
    pos = nx.spring_layout(G)
betCent = nx.betweenness_centrality(G, normalized=True, endpoints=True)
node_color = [20000.0 * G.degree(v) for v in G]
node_size =  [v * 10000 for v in betCent.values()]
plt.figure(figsize=(20,20))
nx.draw_networkx(G, pos=pos, with_labels=True,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('off')

